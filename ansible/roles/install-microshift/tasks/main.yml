---
# install-microshift tasks

- name: install firewalld & packages
  ansible.builtin.dnf:
    name: "{{ install_packages }}"
    state: present
    update_cache: true

- name: check if rhel vg exists
  ansible.builtin.command: vgdisplay -s {{ vg_name }}
  register: rhel_vg_present
  ignore_errors: true

- name: create a volume group on top of secondary disk for topolvm
  community.general.lvg:
    vg: "{{ vg_name }}"
    pvs: "{{ lvm_disk }}"
  when: rhel_vg_present.rc != 0

- name: check if we have oc installed
  ansible.builtin.command: which oc
  register: oc_present
  ignore_errors: true

- name: download and extract oc client
  ansible.builtin.unarchive:
    src: "https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/stable/{{ oc_archive_name }}"
    dest: "{{ root_bin_dir }}"
    remote_src: yes
  when: oc_present.rc != 0

- name: install node-exporter
  ansible.builtin.dnf:
    name:
    - golang-github-prometheus-node-exporter
    state: present

- name: download cadvisor
  ansible.builtin.get_url:
    url: "{{ cadvisor_url }}"
    dest: /usr/bin/cadvisor
    checksum: "{{ cadvisor_checksum }}"
    mode: '0755'

- name: install systemd unit for cadvisor
  ansible.builtin.template:
    src: cadvisor.service.j2
    dest: /usr/lib/systemd/system/cadvisor.service
    backup: true

- name: start and enable systemd services
  ansible.builtin.systemd:
    name: "{{ item }}"
    daemon_reload: yes
    state: started
    enabled: yes
  with_items: "{{ systemd_services }}"

- name: create .kube home dir
  ansible.builtin.file:
    path: /root/.kube/
    state: directory

- name: create symbolic link for kubeconfig
  ansible.builtin.file:
    src: "{{ remote_kubeconfig_path }}"
    path: "/root/.kube/config"
    state: link
    force: yes

- name: permit traffic in trusted zone from CIDR
  ansible.posix.firewalld:
    source: "{{ item }}"
    state: enabled
    immediate: yes
    permanent: yes
    zone: trusted
  with_items: "{{ firewall_trusted_cidr }}"

- name: permit traffic in public zone for services
  ansible.posix.firewalld:
    service: "{{ item }}"
    state: enabled
    immediate: yes
    permanent: yes
    zone: public
  with_items: "{{ firewall_services }}"

- name: permit traffic in public zone for ports
  ansible.posix.firewalld:
    port: "{{ item }}"
    state: enabled
    immediate: yes
    permanent: yes
    zone: public
  with_items: "{{ firewall_ports }}"

- name: upgrade all packages
  ansible.builtin.dnf:
    name: "*"
    state: latest
  notify: reboot machine

- name: flush handlers
  ansible.builtin.meta: flush_handlers

- name: record initial disk space
  vars:
    filename: disk0.txt
  include_tasks: disk.yml
  loop: "{{ du_dirs }}"

- name: build & install microshift RPMs on RHEL
  block:
    - name: install cri-o
      ansible.builtin.dnf:
        name:
          - cri-o
          - cri-tools
        state: present

    - name: start & enable crio service
      ansible.builtin.systemd:
        name: crio
        state: started
        enabled: yes

    - name: clone microshift git repo
      ansible.builtin.git:
        repo: "{{ microshift_repo }}"
        dest: "{{ microshift_dir }}"

    - name: make microshift RPMs
      ansible.builtin.command: make rpm
      args:
        chdir: "{{ microshift_dir }}"

    - name: find built RPMs
      ansible.builtin.find:
        paths: "{{ microshift_dir }}"
        patterns: '*.rpm'
        recurse: yes
      register: microshift_find

    - name: make list of built RPM paths
      ansible.builtin.set_fact:
        microshift_rpms: "{{ microshift_rpms }} + [ '{{ item.path }}' ]"
      with_items: "{{ microshift_find.files }}"

    - name: install microshift RPMs
      ansible.builtin.dnf:
        name: "{{ microshift_rpms }}"
        state: present
        disable_gpg_check: yes
  when: ansible_distribution == "RedHat"

- name: install microshift RPMs on CentOS
  block:
    - name: enable microshift copr repo
      community.general.copr:
        name: '@redhat-et/microshift'
        state: enabled

    - name: enable cri-o module
      ansible.builtin.command: dnf module enable -y cri-o

    - name: install microshift package
      ansible.builtin.dnf:
        name: microshift
        state: present
        update_cache: true
  when: ansible_distribution == "CentOS"

- name: build & install etcd
  block:
    - name: clone etcd git repo
      ansible.builtin.git:
        repo: "{{ etcd_repo }}"
        dest: "{{ etcd_dir }}"

    - name: make etcd binary
      ansible.builtin.command: make
      args:
        chdir: "{{ etcd_dir }}"

    - name: install etcd binary
      ansible.builtin.copy:
        src: "{{ etcd_dir }}/bin/etcd"
        dest: "/usr/bin/etcd"
        remote_src: yes
        mode: '0755'

    - name: copy etcd systemd unit to node
      ansible.builtin.template:
        src: etcd.service.j2
        dest: /usr/lib/systemd/system/etcd.service
        owner: root
        group: root
        mode: '0664'

    - name: start etcd service
      ansible.builtin.systemd:
        daemon_reload: yes
        state: started
        name: etcd
  when: build_etcd_binary | bool

- name: copy pull-secret to node
  ansible.builtin.copy:
    src: pull-secret.txt
    dest: /etc/crio/openshift-pull-secret
    owner: root
    group: root
    mode: '0600'

- name: pbench recording start
  block:
  - name: source pbench-agent & register-tool-set
    ansible.builtin.shell: source /etc/profile.d/pbench-agent.sh && pbench-register-tool-set
  
  - name: set new pidstat interval
    ansible.builtin.shell: source /etc/profile.d/pbench-agent.sh && pbench-register-tool --name=pidstat -- --interval={{ sample_interval }}

  - name: start pbench-user-benchmark recording
    ansible.builtin.shell: source /etc/profile.d/pbench-agent.sh && pbench-user-benchmark --config=microshift -- sleep {{ pbench_record_duration }}
    async: "{{ pbench_record_duration|int * 2 }}"
    poll: 0
    register: pbench_user_benchmark_result
  
  - name: Pause for 60 seconds to gather steady state for pbench tool recording
    ansible.builtin.pause:
      seconds: 60
  when: install_pbench | bool
  environment:
    PBENCH_TOOL_DATA_SINK: localhost:8081

- name: record post-install disk utilization
  vars:
    filename: disk1.txt
  include_tasks: disk.yml
  loop: "{{ du_dirs }}"

- name: force update of current timestamp
  ansible.builtin.setup:
    filter:
      - 'ansible_date_time'

- name: set start_time
  ansible.builtin.set_fact:
    start_time: "{{ ansible_date_time.iso8601[:19] }}"

- name: start microshift service
  ansible.builtin.systemd:
    name: microshift
    state: started
    enabled: no

- name: restart cadvisor to pick up new containers
  ansible.builtin.systemd:
    name: cadvisor
    state: restarted

- name: wait for kubeconfig to exist on microshift node
  ansible.builtin.stat:
    path: "{{ remote_kubeconfig_path }}"
  register: remote_kubeconfig
  until: remote_kubeconfig.stat.exists
  retries: 30
  delay: 10

- include_tasks: roles/common/tasks/readinesscheck.yml

- name: force update of current timestamp
  ansible.builtin.setup:
    filter:
      - 'ansible_date_time'

- name: get runtime
  ansible.builtin.set_fact:
    runtime: "{{ ((ansible_date_time.iso8601[:19] | to_datetime('%Y-%m-%dT%H:%M:%S')) - (start_time | to_datetime('%Y-%m-%dT%H:%M:%S'))).seconds }}"

- name: Add boot info to local file
  lineinfile:
    path: boot.txt
    line: "First boot: {{ runtime }}"
    create: yes
  delegate_to: localhost

- name: create and delete steps
  block:
  - name: stress etcd with configmap loading
    ansible.builtin.shell: |
      for i in {5255..5755}; do
        oc create namespace project-$i
        oc label namespace project-$i purpose=test
        oc create configmap ca-bundle -n project-$i --from-file=/etc/pki/ca-trust/extracted/openssl/ca-bundle.trust.crt
      done

  - name: Pause for 180 seconds for steady state post create
    ansible.builtin.pause:
      seconds: 180

  - name: clean up created namespaces and configmaps
    ansible.builtin.command: oc delete namespace -l purpose=test

  - name: Pause for 180 seconds for steady state post delete
    ansible.builtin.pause:
      seconds: 180
  when: create_delete_cm | default('false') | bool

- name: create and apply steps
  block:
  - name: stress etcd with configmap loading
    ansible.builtin.shell: |
      for i in {5255..5755}; do
        oc create namespace project-$i
        oc label namespace project-$i purpose=test
        oc create configmap ca-bundle -n project-$i --from-file=/etc/pki/ca-trust/extracted/openssl/ca-bundle.trust.crt --save-config
      done

  - name: Pause for 600 seconds for steady state post create
    ansible.builtin.pause:
      seconds: 600

  - name: copy configmap yaml to node
    ansible.builtin.copy:
      src: "{{ configmap_filename }}"
      dest: "{{ configmap_filename }}"
      mode: '0644'

  - name: apply the configmap
    ansible.builtin.command: oc apply -n project-{{ item }} -f {{ configmap_filename }}
    with_sequence: start=5255 end=5755

  - name: delete configmap yaml
    ansible.builtin.file:
      path: "{{ configmap_filename }}"
      state: absent
  when: create_apply_cm | default('false') | bool

#- name: copy kubeconfig to localhost
#  ansible.builtin.fetch:
#    src: "{{ remote_kubeconfig_path }}"
#    dest: "{{ local_kubeconfig_path }}"
#    flat: yes

- name: finish pbench capture
  block:
  - name: check on pbench-user-benchmark status
    ansible.builtin.async_status:
      jid: "{{ pbench_user_benchmark_result.ansible_job_id }}"
    register: job_result
    until: job_result.finished
    retries: 240
    delay: 15
  
  - name: source pbench-agent & move results
    ansible.builtin.shell: source /etc/profile.d/pbench-agent.sh && pbench-move-results --user=microshift
  when: install_pbench | bool
  environment:
    PBENCH_USER: sejug

- name: record fully running disk utilization
  vars:
    filename: disk2.txt
  include_tasks: disk.yml
  loop: "{{ du_dirs }}"
